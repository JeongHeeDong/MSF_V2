
#define SQLCA_NONE
#include <sqlca.h>
extern struct sqlca sqlca;

#include "COraSessionCountCollector.h"
#include "CAlarmProcessor.h"

COraSessionCountCollector::COraSessionCountCollector()
{
}

COraSessionCountCollector::~COraSessionCountCollector()
{
}

void COraSessionCountCollector::collect()
{
	char *msg=NULL;

	if(collectOraData()==false) return;

	
	if(m_pollitem->getPollType() == TYPE_EVENT) {
		CAlarmProcessor ap(this);
		ap.check();
	} else {
		makeMessage();
		msg = m_msgfmt.makeMessage();

		if(m_pollitem->getPollType() == TYPE_PASSIVE){
			m_envvar->getRespQ()->enqueue(msg, NULL);		
		}else{
			if(isShortPerf()==true){
				m_envvar->getShortPerfQ()->enqueue(msg, NULL);		
			}else{
				m_envvar->getLongPerfQ()->enqueue(msg, NULL);		
			}
		}
	}
}

void COraSessionCountCollector::makeMessage()
{
	int i=0;
	char buf[1024], temp[32], tab=0x09;
	CQueue *instQ = m_pollitem->getInstQ();
	elem *e=NULL;

	m_msgfmt.setItem(m_pollitem->getItem());
	m_msgfmt.setPollTime(m_pollitem->getPollTime());
	m_msgfmt.setType(m_pollitem->getPollType());
	if(m_pollitem->getPollType()==TYPE_PASSIVE)
		m_msgfmt.setCommand((char *)m_pollitem->getCommand().c_str());

	memset(buf, 0x00, sizeof(buf));
	sprintf(buf, "BlockingCount\n");
	m_msgfmt.setTitle(buf);

	memset(buf, 0x00, sizeof(buf));
	sprintf(buf, "%d\n", m_scount);
	m_msgfmt.addMessage(strdup(buf));

	return;
}

bool COraSessionCountCollector::collectOraData()
{
	bool b=true;
	CDBSession *_sess=NULL;
	CAgentConfigVar *ccv = m_envvar->getAgentConfigVar();
	EXEC SQL BEGIN DECLARE SECTION;
		int _scount;
		sql_context *_ctx=NULL;
	EXEC SQL END DECLARE SECTION;

	if((_sess = m_envvar->getDBPool()->getSession(
		(char *)ccv->getOraUID().c_str(),
		(char *)ccv->getOraPasswd().c_str(),
		(char *)ccv->getOraSID().c_str()))==NULL)
		return false;

	_ctx = (sql_context *)_sess->getConnection();

	EXEC SQL CONTEXT USE :*_ctx;
	EXEC SQL
		SELECT COUNT(*)
		INTO :_scount
		FROM V$SESSION;

	_sess->returnConnection();
	m_envvar->getDBPool()->returnSession(_sess);

	m_scount = _scount;

	return b;
}

void COraSessionCountCollector::isOverThreshold(CItemCondition *cond)
{
	int at=0,i=0;
	char temp[250];
	bool b=false;

	if(cond->getElement() > 0) return;

	/* check alarm */
	if(cond->getElement() == 0) { /* cpuusage */
		b = cond->isOverThreshold( m_scount );
	} 
	
	checkAlarm(cond, "OraSessionCount", b);

	return ;
}

void COraSessionCountCollector::checkAlarm(CItemCondition *_cond, char *inst, bool ialarm)
{
	st_item_alarm alarm;
	bool _ialarm = false;
	CItem *item = this->getPolicyItem()->getItem();
	CMessageFormatter msgfmt;
	char buf[1024], tab=0x09, *msg;

	memset(&alarm, 0x00, sizeof(st_item_alarm));
	strncpy(alarm.instance, inst, sizeof(alarm.instance));
	alarm.condid = _cond->getIndex();

	_ialarm = item->isAlarm(&alarm);

	if(ialarm == false && _ialarm == false) return;
	else if(ialarm == true && _ialarm == true) return;
	else if(ialarm == true && _ialarm == false){ /* alarm occurred */
		st_item_alarm *ia = (st_item_alarm *)malloc(sizeof(st_item_alarm));
		memset(ia, 0x00, sizeof(st_item_alarm));
		ia->condid = alarm.condid;
		strcpy(ia->instance, alarm.instance);
		item->addAlarm(ia);
	}else if(ialarm == false && _ialarm == true){ /* alarm cleared */
		item->delAlarm(&alarm);
	}

	msgfmt.setItem(m_pollitem->getItem());
	msgfmt.setPollTime(m_pollitem->getPollTime());
	msgfmt.setType(m_pollitem->getPollType());
	msgfmt.setItemCondition(_cond);
	msgfmt.setEventStatus(ialarm);

	memset(buf, 0x00, sizeof(buf));
	sprintf(buf, "BlockingCount\n");
	m_msgfmt.setTitle(buf);

	memset(buf, 0x00, sizeof(buf));
	sprintf(buf, "%d\n", m_scount);
	msgfmt.addMessage(strdup(buf));

	msg = msgfmt.makeMessage();
	m_envvar->getEventQ()->enqueue(msg, NULL);		

	return;
}
