
#define SQLCA_NONE
#include <sqlca.h>
extern struct sqlca sqlca;

#include "COraRollbackCollector.h"
#include "CAlarmProcessor.h"


COraRollbackCollector::COraRollbackCollector()
{
	m_list = NULL;
}

COraRollbackCollector::~COraRollbackCollector()
{
	if(m_list!=NULL)
		scCoreViewRelease(&m_list);
}

void COraRollbackCollector::collect()
{
	char *msg=NULL;

	if(collectOraData()==false) return;

		
	if(m_pollitem->getPollType() == TYPE_EVENT) {
		CAlarmProcessor ap(this);
		ap.check();
	} else {
		makeMessage();
		msg = m_msgfmt.makeMessage();

		if(m_pollitem->getPollType() == TYPE_PASSIVE){
			m_envvar->getRespQ()->enqueue(msg, NULL);		
		}else{
			if(isShortPerf()==true){
				m_envvar->getShortPerfQ()->enqueue(msg, NULL);		
			}else{
				m_envvar->getLongPerfQ()->enqueue(msg, NULL);		
			}
		}
	}
}

void COraRollbackCollector::makeMessage()
{
	int i=0, at=0;
	char buf[1024], temp[32], tab=0x09;
	CQueue *instQ = m_pollitem->getInstQ();
	elem *e=NULL;

	if(m_list == NULL) return;
	m_msgfmt.setItem(m_pollitem->getItem());
	m_msgfmt.setPollTime(m_pollitem->getPollTime());
	m_msgfmt.setType(m_pollitem->getPollType());
	if(m_pollitem->getPollType()==TYPE_PASSIVE)
		m_msgfmt.setCommand((char *)m_pollitem->getCommand().c_str());

	memset(buf, 0x00, sizeof(buf));
	sprintf(buf, "name%cstatus%cextends%cshrinks%cwraps%caveshrink%caveactive%cwaits%cgets%cwrites%cactive_trans\n", 
		tab,tab,tab,tab,tab,tab,tab,tab,tab,tab);
	m_msgfmt.setTitle(buf);

	while((m_rollback = (st_rollback *)ll_element_at(m_list, at++)) != NULL){
		memset(buf, 0x00, sizeof(buf));
		sprintf(buf, "%s%c%s%c%d%c%d%c%d%c%d%c%d%c%d%c%d%c%lld%c%d\n", 
		m_rollback->name, tab, 
		m_rollback->status,tab,
		m_rollback->extends,tab,
		m_rollback->shrinks,tab,
		m_rollback->wraps,tab,
		m_rollback->aveshrink,tab,
		m_rollback->aveactive,tab,
		m_rollback->waits,tab,
		m_rollback->gets,tab,
		m_rollback->writes, tab,
		m_rollback->active_trans);
		m_msgfmt.addMessage(strdup(buf));
	}

	return;
}

bool COraRollbackCollector::collectOraData()
{
	bool b=true;
	CDBSession *_sess=NULL;
	CAgentConfigVar *ccv = m_envvar->getAgentConfigVar();
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR 	_name[32];
		VARCHAR 	_status[12];
		int			_extends=0;
		int			_shrinks=0;
		int			_wraps=0;
		int			_aveshrink=0;
		long		_aveactive=0;
		long		_waits=0;
		long		_gets=0;
		unsigned long long		_writes=0;
		int			_active_trans=0;

		sql_context *_ctx=NULL;

	EXEC SQL END DECLARE SECTION;
		st_rollback _rollback;

	if((_sess = m_envvar->getDBPool()->getSession(
		(char *)ccv->getOraUID().c_str(),
		(char *)ccv->getOraPasswd().c_str(),
		(char *)ccv->getOraSID().c_str()))==NULL)
		return false;

	if((m_list = ll_create_node(NULL,1))==NULL) {
		//_sess->returnConnection();
		m_envvar->getDBPool()->returnSession(_sess);
		return false;
	}

	_ctx = (sql_context *)_sess->getConnection();

	EXEC SQL CONTEXT USE :*_ctx;
	EXEC SQL DECLARE SQL_CUR CURSOR FOR
		/*
		SELECT	SEGMENT_NAME, STATUS
		FROM DBA_ROLLBACK_SEGS
		ORDER BY SEGMENT_NAME;
		*/

		SELECT N.NAME, S.EXTENDS, S.SHRINKS,S.WRAPS,S.AVESHRINK,
			S.AVEACTIVE,S.STATUS, S.WAITS, S.GETS, S.WRITES, S.XACTS
		FROM V$ROLLNAME N, V$ROLLSTAT S
		WHERE N.USN = S.USN;

	EXEC SQL CONTEXT USE :*_ctx;
	EXEC SQL OPEN SQL_CUR;

	while(1){
		memset(&_rollback, 0x00, sizeof(_rollback));
		memset(&_name, 0x00, sizeof(_name));
		memset(&_status, 0x00, sizeof(_status));

		EXEC SQL CONTEXT USE :*_ctx;
		EXEC SQL FETCH SQL_CUR INTO
			:_name, :_extends, :_shrinks, :_wraps, :_aveshrink,
			:_aveactive, :_status, :_waits, :_gets, :_writes,
			:_active_trans;

		if(sqlca.sqlcode == 1403) break;
		else if(sqlca.sqlcode){
//printf("error[%d]\n", sqlca.sqlcode );
			b = false;
			goto out_sql;
		}

		strncpy(_rollback.name, (const char *)_name.arr, _name.len);
		strncpy(_rollback.status, (const char *)_status.arr, _status.len);

		_rollback.extends = _extends;
		_rollback.shrinks = _shrinks;
		_rollback.wraps   = _wraps;
		_rollback.aveshrink = _aveshrink;
		_rollback.aveactive = _aveactive;
		_rollback.waits  = _waits;
		_rollback.gets   = _gets;
		_rollback.writes = _writes;
		_rollback.active_trans = _active_trans;
		
		ll_insert_node(m_list, &_rollback, sizeof(st_rollback), NULL);
	}

out_sql:
	EXEC SQL CONTEXT USE :*_ctx;
	EXEC SQL CLOSE SQL_CUR;

	_sess->returnConnection();
	m_envvar->getDBPool()->returnSession(_sess);
	return b;
}



void COraRollbackCollector::isOverThreshold(CItemCondition *cond)
{
	int at=0,i=0;
	char temp[250];
	bool b=false;

	if(cond->getElement() > 8) return;
	if (m_list == NULL) return;


	while((m_rollback = (st_rollback *)ll_element_at(m_list, at++))!=NULL) {

		if(cond->getInstanceName() == "ALL" || cond->getInstanceName() ==  m_rollback->name) {
			/* check alarm */
			if(cond->getElement() == 1) { /* status */
				b = cond->isOverThreshold( m_rollback->status );
			} else if(cond->getElement() == 2) { /* extends */
				b = cond->isOverThreshold( m_rollback->extends );
			} else if(cond->getElement() == 3) { /* shrinks */
				b = cond->isOverThreshold( m_rollback->shrinks );
			} else if(cond->getElement() == 4) { /* aveshrink */
				b = cond->isOverThreshold( m_rollback->aveshrink );
			} else if(cond->getElement() == 5) { /* aveactive */
				b = cond->isOverThreshold( m_rollback->aveactive );
			} else if(cond->getElement() == 6) { /* waits */
				b = cond->isOverThreshold( m_rollback->waits );
			} else if(cond->getElement() == 7) { /* gets */
				b = cond->isOverThreshold( m_rollback->gets );
			} else if(cond->getElement() == 8) { /* active_trans */
				b = cond->isOverThreshold( m_rollback->active_trans );
			} 
			checkAlarm(cond, m_rollback->name, b, m_rollback);
		}
	}

	return ;
}

void COraRollbackCollector::checkAlarm(CItemCondition *_cond, char *inst, bool ialarm, st_rollback *rollback)
{
	st_item_alarm alarm;
	bool _ialarm = false;
	CItem *item = this->getPolicyItem()->getItem();
	CMessageFormatter msgfmt;
	char buf[1024], tab=0x09, *msg;

	memset(&alarm, 0x00, sizeof(st_item_alarm));
	strncpy(alarm.instance, inst, sizeof(alarm.instance));
	alarm.condid = _cond->getIndex();

	_ialarm = item->isAlarm(&alarm);

	if(ialarm == false && _ialarm == false) return;
	else if(ialarm == true && _ialarm == true) return;
	else if(ialarm == true && _ialarm == false){ /* alarm occurred */
		st_item_alarm *ia = (st_item_alarm *)malloc(sizeof(st_item_alarm));
		memset(ia, 0x00, sizeof(st_item_alarm));
		ia->condid = alarm.condid;
		strcpy(ia->instance, alarm.instance);
		item->addAlarm(ia);
	}else if(ialarm == false && _ialarm == true){ /* alarm cleared */
		item->delAlarm(&alarm);
	}

	msgfmt.setItem(m_pollitem->getItem());
	msgfmt.setPollTime(m_pollitem->getPollTime());
	msgfmt.setType(m_pollitem->getPollType());
	msgfmt.setItemCondition(_cond);
	msgfmt.setEventStatus(ialarm);

	memset(buf, 0x00, sizeof(buf));

	sprintf(buf, "name%cstatus%cextends%cshrinks%cwraps%caveshrink%caveactive%cwaits%cgets%cwrites\n", 
		tab,tab,tab,tab,tab,tab,tab,tab,tab);
	m_msgfmt.setTitle(buf);

	memset(buf, 0x00, sizeof(buf));
	sprintf(buf, "%s%c%s%c%d%c%d%c%d%c%d%c%d%c%d%c%d%c%lld%c%d\n", 
		rollback->name, tab, 
		rollback->status,tab,
		rollback->extends,tab,
		rollback->shrinks,tab,
		rollback->wraps,tab,
		rollback->aveshrink,tab,
		rollback->aveactive,tab,
		rollback->waits,tab,
		rollback->gets,tab,
		rollback->writes, tab,
		rollback->active_trans);

	msgfmt.addMessage(strdup(buf));

	msg = msgfmt.makeMessage();
	m_envvar->getEventQ()->enqueue(msg, NULL);		

	return;
}
